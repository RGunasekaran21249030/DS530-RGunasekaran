{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Examples and Exercises from Think Stats, 2nd Edition\n",
    "\n",
    "http://thinkstats2.com\n",
    "\n",
    "Copyright 2016 Allen B. Downey\n",
    "\n",
    "MIT License: https://opensource.org/licenses/MIT\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import random\n",
    "\n",
    "import thinkstats2\n",
    "import thinkplot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hypothesis testing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following is a version of `thinkstats2.HypothesisTest` with just the essential methods:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class HypothesisTest(object):\n",
    "\n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "        self.MakeModel()\n",
    "        self.actual = self.TestStatistic(data)\n",
    "\n",
    "    def PValue(self, iters=1000):\n",
    "        self.test_stats = [self.TestStatistic(self.RunModel()) \n",
    "                           for _ in range(iters)]\n",
    "\n",
    "        count = sum(1 for x in self.test_stats if x >= self.actual)\n",
    "        return count / iters\n",
    "\n",
    "    def TestStatistic(self, data):\n",
    "        raise UnimplementedMethodException()\n",
    "\n",
    "    def MakeModel(self):\n",
    "        pass\n",
    "\n",
    "    def RunModel(self):\n",
    "        raise UnimplementedMethodException()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And here's an example that uses it to compute the p-value of an experiment where we toss a coin 250 times and get 140 heads."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CoinTest(HypothesisTest):\n",
    "\n",
    "    def TestStatistic(self, data):\n",
    "        heads, tails = data\n",
    "        test_stat = abs(heads - tails)\n",
    "        return test_stat\n",
    "\n",
    "    def RunModel(self):\n",
    "        heads, tails = self.data\n",
    "        n = heads + tails\n",
    "        sample = [random.choice('HT') for _ in range(n)]\n",
    "        hist = thinkstats2.Hist(sample)\n",
    "        data = hist['H'], hist['T']\n",
    "        return data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The p-value turns out to be about 7%, which is considered on the border of statistical significance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.08"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ct = CoinTest((140, 110))\n",
    "pvalue = ct.PValue()\n",
    "pvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Permutation test\n",
    "\n",
    "To compute the p-value of an observed difference in means, we can assume that there is no difference between the groups and generate simulated results by shuffling the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DiffMeansPermute(thinkstats2.HypothesisTest):\n",
    "\n",
    "    def TestStatistic(self, data):\n",
    "        group1, group2 = data\n",
    "        test_stat = abs(group1.mean() - group2.mean())\n",
    "        return test_stat\n",
    "\n",
    "    def MakeModel(self):\n",
    "        group1, group2 = self.data\n",
    "        self.n, self.m = len(group1), len(group2)\n",
    "        self.pool = np.hstack((group1, group2))\n",
    "\n",
    "    def RunModel(self):\n",
    "        np.random.shuffle(self.pool)\n",
    "        data = self.pool[:self.n], self.pool[self.n:]\n",
    "        return data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's an example where we test the observed difference in pregnancy length for first babies and others."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "import first\n",
    "\n",
    "live, firsts, others = first.MakeFrames()\n",
    "data = firsts.prglngth.values, others.prglngth.values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The p-value is about 17%, which means it is plausible that the observed difference is just the result of random sampling, and might not be generally true in the population."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.157"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht = DiffMeansPermute(data)\n",
    "pvalue = ht.PValue()\n",
    "pvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's the distrubution of the test statistic (the difference in means) over many simulated samples:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ht.PlotCdf()\n",
    "thinkplot.Config(xlabel='test statistic',\n",
    "                   ylabel='CDF')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Under the null hypothesis, we often see differences bigger than the observed difference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DiffMeansOneSided(DiffMeansPermute):\n",
    "\n",
    "    def TestStatistic(self, data):\n",
    "        group1, group2 = data\n",
    "        test_stat = group1.mean() - group2.mean()\n",
    "        return test_stat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the hypothesis under test is that first babies come late, the appropriate test statistic is the raw difference between first babies and others, rather than the absolute value of the difference.  In that case, the p-value is smaller, because we are testing a more specific hypothesis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.085"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht = DiffMeansOneSided(data)\n",
    "pvalue = ht.PValue()\n",
    "pvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But in this example, the result is still not statistically significant."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Difference in standard deviation\n",
    "\n",
    "In this framework, it is easy to use other test statistics.  For example, if we think the variance for first babies might be higher, we can run this test:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DiffStdPermute(DiffMeansPermute):\n",
    "\n",
    "    def TestStatistic(self, data):\n",
    "        group1, group2 = data\n",
    "        test_stat = group1.std() - group2.std()\n",
    "        return test_stat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.092"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht = DiffStdPermute(data)\n",
    "pvalue = ht.PValue()\n",
    "pvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But that's not statistically significant either."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing correlation\n",
    "\n",
    "To check whether an observed correlation is statistically significant, we can run a permutation test with a different test statistic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "class CorrelationPermute(thinkstats2.HypothesisTest):\n",
    "\n",
    "    def TestStatistic(self, data):\n",
    "        xs, ys = data\n",
    "        test_stat = abs(thinkstats2.Corr(xs, ys))\n",
    "        return test_stat\n",
    "\n",
    "    def RunModel(self):\n",
    "        xs, ys = self.data\n",
    "        xs = np.random.permutation(xs)\n",
    "        return xs, ys"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's an example testing the correlation between birth weight and mother's age."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cleaned = live.dropna(subset=['agepreg', 'totalwgt_lb'])\n",
    "data = cleaned.agepreg.values, cleaned.totalwgt_lb.values\n",
    "ht = CorrelationPermute(data)\n",
    "pvalue = ht.PValue()\n",
    "pvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "The reported p-value is 0, which means that in 1000 trials we didn't see a correlation, under the null hypothesis, that exceeded the observed correlation.  That means that the p-value is probably smaller than $1/1000$, but it is not actually 0.\n",
    "\n",
    "To get a sense of how unexpected the observed value is under the null hypothesis, we can compare the actual correlation to the largest value we saw in the simulations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.06883397035410908, 0.035487040804238396)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht.actual, ht.MaxTestStat()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Testing proportions\n",
    "\n",
    "Here's an example that tests whether the outcome of a rolling a six-sided die is suspicious, where the test statistic is the total absolute difference between the observed outcomes and the expected long-term averages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DiceTest(thinkstats2.HypothesisTest):\n",
    "\n",
    "    def TestStatistic(self, data):\n",
    "        observed = data\n",
    "        n = sum(observed)\n",
    "        expected = np.ones(6) * n / 6\n",
    "        test_stat = sum(abs(observed - expected))\n",
    "        return test_stat\n",
    "\n",
    "    def RunModel(self):\n",
    "        n = sum(self.data)\n",
    "        values = [1, 2, 3, 4, 5, 6]\n",
    "        rolls = np.random.choice(values, n, replace=True)\n",
    "        hist = thinkstats2.Hist(rolls)\n",
    "        freqs = hist.Freqs(values)\n",
    "        return freqs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's an example using the data from the book:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1357"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = [8, 9, 19, 5, 8, 11]\n",
    "dt = DiceTest(data)\n",
    "pvalue = dt.PValue(iters=10000)\n",
    "pvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The observed deviance from the expected values is not statistically significant.\n",
    "\n",
    "By convention, it is more common to test data like this using the chi-squared statistic:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "class DiceChiTest(DiceTest):\n",
    "\n",
    "    def TestStatistic(self, data):\n",
    "        observed = data\n",
    "        n = sum(observed)\n",
    "        expected = np.ones(6) * n / 6\n",
    "        test_stat = sum((observed - expected)**2 / expected)\n",
    "        return test_stat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using this test, we get a smaller p-value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0432"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt = DiceChiTest(data)\n",
    "pvalue = dt.PValue(iters=10000)\n",
    "pvalue"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Taking this result at face value, we might consider the data statistically significant, but considering the results of both tests, I would not draw any strong conclusions."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Chi-square test of pregnancy length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "class PregLengthTest(thinkstats2.HypothesisTest):\n",
    "\n",
    "    def MakeModel(self):\n",
    "        firsts, others = self.data\n",
    "        self.n = len(firsts)\n",
    "        self.pool = np.hstack((firsts, others))\n",
    "\n",
    "        pmf = thinkstats2.Pmf(self.pool)\n",
    "        self.values = range(35, 44)\n",
    "        self.expected_probs = np.array(pmf.Probs(self.values))\n",
    "\n",
    "    def RunModel(self):\n",
    "        np.random.shuffle(self.pool)\n",
    "        data = self.pool[:self.n], self.pool[self.n:]\n",
    "        return data\n",
    "    \n",
    "    def TestStatistic(self, data):\n",
    "        firsts, others = data\n",
    "        stat = self.ChiSquared(firsts) + self.ChiSquared(others)\n",
    "        return stat\n",
    "\n",
    "    def ChiSquared(self, lengths):\n",
    "        hist = thinkstats2.Hist(lengths)\n",
    "        observed = np.array(hist.Freqs(self.values))\n",
    "        expected = self.expected_probs * len(lengths)\n",
    "        stat = sum((observed - expected)**2 / expected)\n",
    "        return stat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we specifically test the deviations of first babies and others from the expected number of births in each week of pregnancy, the results are statistically significant with a very small p-value.  But at this point we have run so many tests, we should not be surprised to find at least one that seems significant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value = 0.0\n",
      "actual = 101.50141482893264\n",
      "ts max = 29.69196720078119\n"
     ]
    }
   ],
   "source": [
    "data = firsts.prglngth.values, others.prglngth.values\n",
    "ht = PregLengthTest(data)\n",
    "p_value = ht.PValue()\n",
    "print('p-value =', p_value)\n",
    "print('actual =', ht.actual)\n",
    "print('ts max =', ht.MaxTestStat())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Power\n",
    "\n",
    "Here's the function that estimates the probability of a non-significant p-value even is there really is a difference between the groups."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def FalseNegRate(data, num_runs=1000):\n",
    "    \"\"\"Computes the chance of a false negative based on resampling.\n",
    "\n",
    "    data: pair of sequences\n",
    "    num_runs: how many experiments to simulate\n",
    "\n",
    "    returns: float false negative rate\n",
    "    \"\"\"\n",
    "    group1, group2 = data\n",
    "    count = 0\n",
    "\n",
    "    for i in range(num_runs):\n",
    "        sample1 = thinkstats2.Resample(group1)\n",
    "        sample2 = thinkstats2.Resample(group2)\n",
    "        ht = DiffMeansPermute((sample1, sample2))\n",
    "        p_value = ht.PValue(iters=101)\n",
    "        if p_value > 0.05:\n",
    "            count += 1\n",
    "\n",
    "    return count / num_runs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.687"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_rate = FalseNegRate(data)\n",
    "neg_rate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this example, the false negative rate is 70%, which means that the power of the test (probability of statistical significance if the actual difference is 0.078 weeks) is only 30%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercises Page 114: 9-1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Exercise:** As sample size increases, the power of a hypothesis test increases, which means it is more likely to be positive if the effect is real. Conversely, as sample size decreases, the test is less likely to be positive even if the effect is real.\n",
    "\n",
    "To investigate this behavior, run the tests in this chapter with different subsets of the NSFG data. You can use `thinkstats2.SampleRows` to select a random subset of the rows in a DataFrame.\n",
    "\n",
    "What happens to the p-values of these tests as sample size decreases? What is the smallest sample size that yields a positive test?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Solution goes here\n",
    "\n",
    "# RunTest Method will get Live, Iteration as input \n",
    "def RunTests(live, iters=2000):\n",
    "    \n",
    "   #considering the DataFrame : Live from excercise 9 from above\n",
    "   # iterations: Number of Iterations to be run\n",
    "\n",
    "    Len_Live = len(live)\n",
    "    \n",
    "    # based on the birthorder field, we can choose the first baby\n",
    "    Birth_First = live[live.birthord == 1]\n",
    "    \n",
    "    # based on the birthorder field, we can choose the non- first baby\n",
    "    Birth_NotFirst = live[live.birthord != 1]\n",
    "\n",
    "    \n",
    "    # Differnece in mean as ht and calculating the p-value\n",
    "    data = Birth_First.prglngth.values, Birth_NotFirst.prglngth.values\n",
    "    ht = DiffMeansPermute(data)\n",
    "    Mean_PregLenth = ht.PValue(iters=iters)\n",
    "\n",
    "    # Differnece in mean as ht and calculate the p value\n",
    "    data = (Birth_First.totalwgt_lb.dropna().values,\n",
    "            Birth_NotFirst.totalwgt_lb.dropna().values)\n",
    "    ht = DiffMeansPermute(data)\n",
    "    Mean_BirthweightTtl = ht.PValue(iters=iters)\n",
    "\n",
    "    # Differnece in correlation as ht and calculate the p value  \n",
    "    live2 = live.dropna(subset=['agepreg', 'totalwgt_lb'])\n",
    "    data = live2.agepreg.values, live2.totalwgt_lb.values\n",
    "    ht = CorrelationPermute(data)\n",
    "    CorPerValue = ht.PValue(iters=iters)\n",
    "\n",
    "    # chi-squared\n",
    "    data = Birth_First.prglngth.values, Birth_NotFirst.prglngth.values\n",
    "    ht = PregLengthTest(data)\n",
    "    ChiSquaredValue = ht.PValue(iters=iters)\n",
    "\n",
    "    print('%d\\t%0.3f\\t%0.3f\\t%0.3f\\t%0.3f' % (n, Mean_PregLenth, Mean_BirthweightTtl,CorPerValue, ChiSquaredValue))\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9148\t0.174\t0.000\t0.000\t0.000\n",
      "4574\t0.079\t0.036\t0.001\t0.000\n",
      "2287\t0.559\t0.006\t0.002\t0.000\n",
      "1143\t0.946\t0.059\t0.014\t0.112\n",
      "571\t0.703\t0.093\t0.281\t0.715\n",
      "285\t0.194\t0.453\t0.692\t0.035\n"
     ]
    }
   ],
   "source": [
    "# Solution goes here\n",
    "\n",
    "n = len(live)\n",
    "for _ in range(6):\n",
    "    sample = thinkstats2.SampleRows(live, n)\n",
    "    RunTests(sample)\n",
    "    n //= 2\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Solution goes here\n",
    "\n",
    "# My results:\n",
    "\n",
    "# test1: Calculate Mean difference in pregnancy length\n",
    "# test2: Calculate Mean difference in birth weight\n",
    "# test3: Calculate correlation between inof mother's age and birth weight\n",
    "# test4: Calcluate chi-square test for pregnancy length\n",
    "\n",
    "# n=2000    \n",
    "# Test 1 \tTest 2\t Test 3\t\tTest 4\n",
    "# 9148\t0.174\t0.000\t0.000\t0.000\n",
    "# 4574\t0.079\t0.036\t0.001\t0.000\n",
    "# 2287\t0.559\t0.006\t0.002\t0.000\n",
    "# 1143\t0.946\t0.059\t0.014\t0.112\n",
    "# 571\t0.703\t0.093\t0.281\t0.715\n",
    "# 285\t0.194\t0.453\t0.692\t0.035\n",
    "\n",
    "\n",
    "# n=1000    \n",
    "# Test 1 \tTest 2\t Test 3\t\tTest 4\n",
    "# 9148\t0.169\t0.000\t0.000\t0.000\n",
    "# 4574\t0.300\t0.001\t0.000\t0.000\n",
    "# 2287\t0.189\t0.183\t0.002\t0.001\n",
    "# 1143\t0.651\t0.050\t0.004\t0.013\n",
    "# 571\t0.882\t0.765\t0.236\t0.019\n",
    "# 285\t0.760\t0.185\t0.251\t0.227\n",
    "\n",
    "# I added the results for 1000 and 2000 iterations and also verified with multiple iterations.\n",
    "# Tests are having positive values for small sample size.\n",
    "\n",
    "# Reference 1 : https://towardsdatascience.com/hypothesis-testing-in-machine-learning-using-python-a0dc89e169ce\n",
    "# Reference 2 : http://greenteapress.com/thinkstats2/html/thinkstats2010.html\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "from __future__ import print_function, division\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "import random\n",
    "\n",
    "import thinkstats2\n",
    "import thinkplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "import first\n",
    "live, firsts, others = first.MakeFrames()\n",
    "live = live.dropna(subset=['agepreg', 'totalwgt_lb'])\n",
    "ages = live.agepreg\n",
    "weights = live.totalwgt_lb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "from thinkstats2 import Mean, MeanVar, Var, Std, Cov\n",
    "\n",
    "def LeastSquares(xs, ys):\n",
    "    meanx, varx = MeanVar(xs)\n",
    "    meany = Mean(ys)\n",
    "\n",
    "    slope = Cov(xs, ys, meanx, meany) / varx\n",
    "    inter = meany - slope * meanx\n",
    "\n",
    "    return inter, slope"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.8303969733110526, 0.017453851471802756)"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inter, slope = LeastSquares(ages, weights)\n",
    "inter, slope"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7.2667432601061215"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inter + slope * 25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "def FitLine(xs, inter, slope):\n",
    "    fit_xs = np.sort(xs)\n",
    "    fit_ys = inter + slope * fit_xs\n",
    "    return fit_xs, fit_ys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "fit_xs, fit_ys = FitLine(ages, inter, slope)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "thinkplot.Scatter(ages, weights, color='blue', alpha=0.1, s=10)\n",
    "thinkplot.Plot(fit_xs, fit_ys, color='white', linewidth=3)\n",
    "thinkplot.Plot(fit_xs, fit_ys, color='red', linewidth=2)\n",
    "thinkplot.Config(xlabel=\"Mother's age (years)\",\n",
    "                 ylabel='Birth weight (lbs)',\n",
    "                 axis=[10, 45, 0, 15],\n",
    "                 legend=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Residuals(xs, ys, inter, slope):\n",
    "    xs = np.asarray(xs)\n",
    "    ys = np.asarray(ys)\n",
    "    res = ys - (inter + slope * xs)\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "live['residual'] = Residuals(ages, weights, inter, slope)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[15.212333333333312,\n",
       " 17.74035928143719,\n",
       " 20.506304824561838,\n",
       " 23.455752212389893,\n",
       " 26.435156146179903,\n",
       " 29.411177432543294,\n",
       " 32.30232530120497,\n",
       " 35.240273631840736,\n",
       " 38.10876470588231,\n",
       " 40.91205882352941]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bins = np.arange(10, 48, 3)\n",
    "indices = np.digitize(live.agepreg, bins)\n",
    "groups = live.groupby(indices)\n",
    "\n",
    "age_means = [group.agepreg.mean() for _, group in groups][1:-1]\n",
    "age_means"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "cdfs = [thinkstats2.Cdf(group.residual) for _, group in groups][1:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "def PlotPercentiles(age_means, cdfs):\n",
    "    thinkplot.PrePlot(3)\n",
    "    for percent in [75, 50, 25]:\n",
    "        weight_percentiles = [cdf.Percentile(percent) for cdf in cdfs]\n",
    "        label = '%dth' % percent\n",
    "        thinkplot.Plot(age_means, weight_percentiles, label=label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "PlotPercentiles(age_means, cdfs)\n",
    "\n",
    "thinkplot.Config(xlabel=\"Mother's age (years)\",\n",
    "                 ylabel='Residual (lbs)',\n",
    "                 xlim=[10, 45])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "def SampleRows(df, nrows, replace=False):\n",
    "    \"\"\"Choose a sample of rows from a DataFrame.\n",
    "\n",
    "    df: DataFrame\n",
    "    nrows: number of rows\n",
    "    replace: whether to sample with replacement\n",
    "\n",
    "    returns: DataDf\n",
    "    \"\"\"\n",
    "    indices = np.random.choice(df.index, nrows, replace=replace)\n",
    "    sample = df.loc[indices]\n",
    "    return sample\n",
    "\n",
    "def ResampleRows(df):\n",
    "    \"\"\"Resamples rows from a DataFrame.\n",
    "\n",
    "    df: DataFrame\n",
    "\n",
    "    returns: DataFrame\n",
    "    \"\"\"\n",
    "    return SampleRows(df, len(df), replace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "def SamplingDistributions(live, iters=101):\n",
    "    t = []\n",
    "    for _ in range(iters):\n",
    "        sample = ResampleRows(live)\n",
    "        ages = sample.agepreg\n",
    "        weights = sample.totalwgt_lb\n",
    "        estimates = LeastSquares(ages, weights)\n",
    "        t.append(estimates)\n",
    "\n",
    "    inters, slopes = zip(*t)\n",
    "    return inters, slopes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "inters, slopes = SamplingDistributions(live, iters=1001)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "def Summarize(estimates, actual=None):\n",
    "    mean = Mean(estimates)\n",
    "    stderr = Std(estimates, mu=actual)\n",
    "    cdf = thinkstats2.Cdf(estimates)\n",
    "    ci = cdf.ConfidenceInterval(90)\n",
    "    print('mean, SE, CI', mean, stderr, ci)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean, SE, CI 6.830523933719046 0.0689991480102878 (6.714173894547012, 6.942944291705073)\n"
     ]
    }
   ],
   "source": [
    "Summarize(inters)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean, SE, CI 0.017466055736096758 0.002750931477434333 (0.012808627758064175, 0.022011654990685168)\n"
     ]
    }
   ],
   "source": [
    "Summarize(slopes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Exercise:** Use `ResampleRows` and generate a list of estimates for the mean birth weight.  Use `Summarize` to compute the SE and CI for these estimates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean, SE, CI 7.265355775614074 0.015035423215548384 (7.2396063841557865, 7.290225990263332)\n"
     ]
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "iters = 1000\n",
    "estimates = [ResampleRows(live).totalwgt_lb.mean()\n",
    "             for _ in range(iters)]\n",
    "Summarize(estimates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for slope, inter in zip(slopes, inters):\n",
    "    fxs, fys = FitLine(age_means, inter, slope)\n",
    "    thinkplot.Plot(fxs, fys, color='gray', alpha=0.01)\n",
    "    \n",
    "thinkplot.Config(xlabel=\"Mother's age (years)\",\n",
    "                 ylabel='Residual (lbs)',\n",
    "                 xlim=[10, 45])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "def PlotConfidenceIntervals(xs, inters, slopes, percent=90, **options):\n",
    "    fys_seq = []\n",
    "    for inter, slope in zip(inters, slopes):\n",
    "        fxs, fys = FitLine(xs, inter, slope)\n",
    "        fys_seq.append(fys)\n",
    "\n",
    "    p = (100 - percent) / 2\n",
    "    percents = p, 100 - p\n",
    "    low, high = thinkstats2.PercentileRows(fys_seq, percents)\n",
    "    thinkplot.FillBetween(fxs, low, high, **options)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "PlotConfidenceIntervals(age_means, inters, slopes, percent=90, \n",
    "                        color='gray', alpha=0.3, label='90% CI')\n",
    "PlotConfidenceIntervals(age_means, inters, slopes, percent=50,\n",
    "                        color='gray', alpha=0.5, label='50% CI')\n",
    "\n",
    "thinkplot.Config(xlabel=\"Mother's age (years)\",\n",
    "                 ylabel='Residual (lbs)',\n",
    "                 xlim=[10, 45])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "def CoefDetermination(ys, res):\n",
    "    return 1 - Var(res) / Var(ys)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00473811547471048"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inter, slope = LeastSquares(ages, weights)\n",
    "res = Residuals(ages, weights, inter, slope)\n",
    "r2 = CoefDetermination(weights, res)\n",
    "r2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "rho 0.06883397035410908\n",
      "R 0.0688339703541099\n"
     ]
    }
   ],
   "source": [
    "print('rho', thinkstats2.Corr(ages, weights))\n",
    "print('R', np.sqrt(r2))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Std(ys) 1.40821553384062\n",
      "Std(res) 1.4048754287857832\n"
     ]
    }
   ],
   "source": [
    "print('Std(ys)', Std(weights))\n",
    "print('Std(res)', Std(res))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.409610943738484"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_ys = 15**2\n",
    "rho = 0.72\n",
    "r2 = rho**2\n",
    "var_res = (1 - r2) * var_ys\n",
    "std_res = np.sqrt(var_res)\n",
    "std_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "class SlopeTest(thinkstats2.HypothesisTest):\n",
    "\n",
    "    def TestStatistic(self, data):\n",
    "        ages, weights = data\n",
    "        _, slope = thinkstats2.LeastSquares(ages, weights)\n",
    "        return slope\n",
    "\n",
    "    def MakeModel(self):\n",
    "        _, weights = self.data\n",
    "        self.ybar = weights.mean()\n",
    "        self.res = weights - self.ybar\n",
    "\n",
    "    def RunModel(self):\n",
    "        ages, _ = self.data\n",
    "        weights = self.ybar + np.random.permutation(self.res)\n",
    "        return ages, weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht = SlopeTest((ages, weights))\n",
    "pvalue = ht.PValue()\n",
    "pvalue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.017453851471802756, 0.008718615494487776)"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht.actual, ht.MaxTestStat()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampling_cdf = thinkstats2.Cdf(slopes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "thinkplot.PrePlot(2)\n",
    "thinkplot.Plot([0, 0], [0, 1], color='0.8')\n",
    "ht.PlotCdf(label='null hypothesis')\n",
    "\n",
    "thinkplot.Cdf(sampling_cdf, label='sampling distribution')\n",
    "\n",
    "thinkplot.Config(xlabel='slope (lbs / year)',\n",
    "                   ylabel='CDF',\n",
    "                   xlim=[-0.03, 0.03],\n",
    "                   legend=True, loc='upper left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ResampleRowsWeighted(df, column='finalwgt'):\n",
    "    weights = df[column]\n",
    "    cdf = thinkstats2.Cdf(dict(weights))\n",
    "    indices = cdf.Sample(len(weights))\n",
    "    sample = df.loc[indices]\n",
    "    return sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean, SE, CI 7.3471324546359815 0.015268516165940186 (7.320328059305156, 7.373063730913919)\n"
     ]
    }
   ],
   "source": [
    "iters = 100\n",
    "estimates = [ResampleRowsWeighted(live).totalwgt_lb.mean()\n",
    "             for _ in range(iters)]\n",
    "Summarize(estimates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean, SE, CI 7.2678835887364475 0.014597834336975143 (7.243064007523788, 7.287923213100243)\n"
     ]
    }
   ],
   "source": [
    "estimates = [thinkstats2.ResampleRows(live).totalwgt_lb.mean()\n",
    "             for _ in range(iters)]\n",
    "Summarize(estimates)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercises - Page 128: 10-1\n",
    "\n",
    "**Exercise:** Using the data from the BRFSS, compute the linear least squares fit for log(weight) versus height. How would you best present the estimated parameters for a model like this where one of the variables is log-transformed? If you were trying to guess someone’s weight, how much would it help to know their height?\n",
    "\n",
    "Like the NSFG, the BRFSS oversamples some groups and provides a sampling weight for each respondent. In the BRFSS data, the variable name for these weights is totalwt. Use resampling, with and without weights, to estimate the mean height of respondents in the BRFSS, the standard error of the mean, and a 90% confidence interval. How much does correct weighting affect the estimates?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "import brfss\n",
    "\n",
    "# as per the exercise 10, \n",
    "\n",
    "df = brfss.ReadBrfss(nrows=None)\n",
    "df = df.dropna(subset=['htm3', 'wtkg2'])\n",
    "heights, weights = df.htm3, df.wtkg2\n",
    "log_weights = np.log10(weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.9930804163918104, 0.005281454169417819)"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "inter, slope = thinkstats2.LeastSquares(heights, log_weights)\n",
    "inter, slope"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "thinkplot.Scatter(heights, log_weights, alpha=0.01, s=5)\n",
    "fxs, fys = thinkstats2.FitLine(heights, inter, slope)\n",
    "thinkplot.Plot(fxs, fys, color='red')\n",
    "thinkplot.Config(xlabel='Height (cm)', ylabel='log10 weight (kg)', legend=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "thinkplot.Scatter(heights, weights, alpha=0.01, s=5)\n",
    "fxs, fys = thinkstats2.FitLine(heights, inter, slope)\n",
    "thinkplot.Plot(fxs, 10**fys, color='red')\n",
    "thinkplot.Config(xlabel='Height (cm)', ylabel='Weight (kg)', legend=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Solution\n",
    "\n",
    "res = thinkstats2.Residuals(heights, log_weights, inter, slope)\n",
    "df['residual'] = res\n",
    "\n",
    "bins = np.arange(130, 210, 5)\n",
    "indices = np.digitize(df.htm3, bins)\n",
    "groups = df.groupby(indices)\n",
    "\n",
    "means = [group.htm3.mean() for i, group in groups][1:-1]\n",
    "cdfs = [thinkstats2.Cdf(group.residual) for i, group in groups][1:-1]\n",
    "\n",
    "thinkplot.PrePlot(3)\n",
    "for percent in [75, 50, 25]:\n",
    "    ys = [cdf.Percentile(percent) for cdf in cdfs]\n",
    "    label = '%dth' % percent\n",
    "    thinkplot.Plot(means, ys, label=label)\n",
    "    \n",
    "thinkplot.Config(xlabel='height (cm)', ylabel='residual weight (kg)', legend=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rho = thinkstats2.Corr(heights, log_weights)\n",
    "rho"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#  calculating rho, r2, standard deviation, p values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.28273494311894065"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2 = thinkstats2.CoefDetermination(log_weights, res)\n",
    "r2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.103207250300049"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std_ys = thinkstats2.Std(log_weights)\n",
    "std_ys"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0874077708041609"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "std_res = thinkstats2.Std(res)\n",
    "std_res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "t = []\n",
    "for _ in range(100):\n",
    "    sample = thinkstats2.ResampleRows(df)\n",
    "    estimates = thinkstats2.LeastSquares(sample.htm3, np.log10(sample.wtkg2))\n",
    "    t.append(estimates)\n",
    "\n",
    "inters, slopes = zip(*t)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'xscale': 'linear', 'yscale': 'linear'}"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXkAAAD4CAYAAAAJmJb0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATrklEQVR4nO3dfawcZ3WA8efgxKFQaBBxULBjYpApMi2BcEmgKi0E0dqpKoNSKR+IiBTkuiJVVamIoH6BQlU+ikQQAcuFlKYScUoDtWkdohaXgkoCdiAOOGmCMSW5cdQ4tKIFJILJ6R87N1mP9+7OvXd2d2b2+Ukr787M7h5d28fHZ868E5mJJKmbnjTtACRJ42OSl6QOM8lLUoeZ5CWpw0zyktRhp0zri88444w855xzpvX1ktRKd9xxxyOZuabq8VNL8ueccw4HDhyY1tdLUitFxHeXcrztGknqMJO8JHWYSV6SOswkL0kdZpKXpA4bmeQj4vqIeDgivrnI/oiID0XE4Yi4KyLOqz9MSdJyVKnkPwFsHrJ/C7CxeGwDPrrysCRJdRg5J5+ZX4yIc4YcshW4IXtrFt8eEadHxFmZ+VBNMUpSZ1z8+zsef37ztdvH/n119OTXAg/0vZ4vtp0kIrZFxIGIOHDs2LEavlqSNEwdV7zGgG0D70SSmTuBnQBzc3PerUTSVOzed5CbbjnAjx/9ybRDGbs6Kvl54Oy+1+uAozV8riSNRRMS/GmrT53I99RRye8BroqIXcAFwPftx0tqkqZV7qetPpVLtsxN5LtGJvmIuBF4FXBGRMwDfwacCpCZO4C9wEXAYeBHwJXjClaSlmOxBH/a6lP55PvfPIWIJqfKdM1lI/Yn8NbaIpKkGoyq3idZTU/T1JYalqRxGpTgZ6FyL3NZA0mds3vfwYEJfhYq9zIreUmdc9MtT9yQaBar934meUmNVcdUzCxW7/1s10hqrJUm+NNWn8rWC8+tMaL2sZKXNHGTmFuf1R58mUle0sQtNcHPel99JWzXSJqoQZMvw1iRr4yVvKSJcvJlsqzkJU1MuYq3Qh8/k7ykiSlX8bM++TIJtmskjd2gaRqr+Mmwkpc0duUEbxU/OVbykpZlubPuTstMlkle0rIsN8E7TTNZtmskLdlSZ93BCn5arOQlLZmz7u1hkpc0UNWeu9V5s9mukTRQlQTvlEzzmeQlnaRKz90eezvYrpF0Envu3WGSl2ZYlb671Xq72a6RZtioBG/Pvf2s5KUZU3Vqxp57N5jkpRkzKMHbd+8uk7w0A4ZV71bs3WaSl2aA1fvsMslLHWX1LjDJS51l9S5whFLqpEFXrFq9zyYreamDvGJVCypV8hGxOSLujYjDEXH1gP0/FxGfjYiDEXEoIq6sP1RJo+zed5DL3/Zx76Wqx41M8hGxCrgO2AJsAi6LiE2lw94K3J2Z5wKvAj4QEatrjlXSCN5LVWVVKvnzgcOZeSQzHwV2AVtLxyTwtIgI4GeB/waO1xqppJHKCd4qXlV68muBB/pezwMXlI75MLAHOAo8DbgkMx8rf1BEbAO2Aaxfv3458UqqyD68oFqSjwHbsvT614E7gQuB5wH/HBFfysz/PeFNmTuBnQBzc3Plz5BUQdW1ZySo1q6ZB87ue72OXsXe70rg09lzGPgO8IJ6QpTUr+riYhJUS/L7gY0RsaE4mXopvdZMv/uB1wBExLOAnweO1BmoJO/YpKUb2a7JzOMRcRVwK7AKuD4zD0XE9mL/DuAa4BMR8Q167Z23Z+YjY4xbmknOv2upKl0MlZl7gb2lbTv6nh8Ffq3e0CT1K1fxVuuqwmUNpJYoV/HOv6sKk7zUElbxWg6TvNRCVvGqygXKpAZzJl4rZSUvNdhia8JLVZnkpYZyTXjVwXaN1FDOxKsOVvJSQzlNozqY5KUWcJpGy2WSl6QOM8lLUoeZ5KUG2r3v4LRDUEeY5KUGKk/WSMvlCKXUEItd3epkjVbCSl5qiMWubnWyRithkpcawKtbNS62a6QpWaw949WtqpOVvDQli60uafWuOlnJSxM2rIK/ZMucPXjVyiQvTVg5wdue0TjZrpEmrJzgbc9onKzkpSmygte4WclLE+RyBZo0k7w0QS5XoEkzyUsTUr7gyV68JsEkL01IuYp3VFKTYJKXJsQqXtNgkpemwCpek+IIpTRGi13dKk2Klbw0RostXyBNSqUkHxGbI+LeiDgcEVcvcsyrIuLOiDgUEf9Wb5hS+7h8sJpgZLsmIlYB1wGvBeaB/RGxJzPv7jvmdOAjwObMvD8izhxXwFJblKdpvLpV01ClJ38+cDgzjwBExC5gK3B33zGXA5/OzPsBMvPhugOVmm5Y/93qXdNSpV2zFnig7/V8sa3f84FnRMQXIuKOiLhi0AdFxLaIOBARB44dO7a8iKWGWizBOxOvaapSyceAbTngc14KvAb4GeC2iLg9M+874U2ZO4GdAHNzc+XPkFpn1PSMPXhNW5UkPw+c3fd6HXB0wDGPZOYPgR9GxBeBc4H7kDrM2/ep6aq0a/YDGyNiQ0SsBi4F9pSO2Q28MiJOiYinABcA99QbqtQ8Ts+o6UZW8pl5PCKuAm4FVgHXZ+ahiNhe7N+RmfdExOeAu4DHgI9l5jfHGbjUNDdfu33aIUgnqXTFa2buBfaWtu0ovX4/8P76QpOazbXh1QZe8Sotk2vDqw1cu0ZaokETNfbh1VRW8tISlRO8c/BqMpO8tATl9WicplHT2a6RlsD1aNQ2VvLSEtiHV9uY5KVlsg+vNjDJSxU5F682MslLFTkXrzbyxKs0gnPxajMreWkE5+LVZiZ5aQTn4tVmtmukJXAuXm1jJS8N4USN2s4kLw3hRI3aziQvDeFEjdrOJC9V5ESN2sgkLy3Cfry6wCQvLcJ+vLrAEUqpxCtc1SVW8lKJV7iqS0zyUolXuKpLbNdIQ3iFq9rOSl6SOswkL0kdZrtGM2/QNI3UFVbymnmLJXhn49UFJnnNvMUSvFM16gLbNVKfm6/dPu0QpFpZyWumuT6Nus4kr5nm+jTqukpJPiI2R8S9EXE4Iq4ectzLIuKnEfFb9YUojcfufQddn0adNzLJR8Qq4DpgC7AJuCwiNi1y3HuBW+sOUhqHchXv+jTqoiqV/PnA4cw8kpmPAruArQOO+z3gZuDhGuOTxsYqXrOgSpJfCzzQ93q+2Pa4iFgLvB7YMeyDImJbRByIiAPHjh1baqzS2FjFq6uqJPkYsC1Lrz8IvD0zfzrsgzJzZ2bOZebcmjVrqsYo1c6pGs2KKnPy88DZfa/XAUdLx8wBuyIC4Azgoog4npn/UEuUUs2cqtGsqJLk9wMbI2ID8CBwKXB5/wGZuWHheUR8AvhHE7yaYtTaNPbj1WUjk3xmHo+Iq+hNzawCrs/MQxGxvdg/tA8vTduwBO9Ujbqu0rIGmbkX2FvaNjC5Z+abVh6WVI/yLHw/16fRLHDtGnVauffunZ40a1zWQJ3lFa2SSV4d5hWtkkleHWYVL5nkNSOs4jWrPPGqTvA+rdJgVvLqhFGz8NKsMsmr9ZyFlxZnu0at5yy8tDgrebWas/DScCZ5tZqz8NJwtmvUSoOmaazipZNZyauVygneKl4azEpejVZl/t0JGmlxJnk1WpUE7zSNtDiTvBrJCl6qh0lejTSo527FLi2dJ17VOOXZdyt2afms5NU4XsEq1cdKXo3j7LtUH5O8Gs3Zd2llbNeoEVwPXhoPk7ymbve+g9yw+7aTtrsOvLRytms0df0nWhc4USPVw0peUzOoRXPF1lfYh5dqZCWvqXGRMWn8rOQ1Fks9kWp7RhoPk7zGYqkJ3guepPGwXaOxsIKXmsFKXmN387Xbpx2CNLMqVfIRsTki7o2IwxFx9YD9b4iIu4rHlyPCs2czave+g1z+to9POwxJhZFJPiJWAdcBW4BNwGURsal02HeAX83MFwHXADvrDlTtMGhiRtL0VGnXnA8czswjABGxC9gK3L1wQGZ+ue/424F1dQapZqk6OWO/XZq+Kkl+LfBA3+t54IIhx78ZuGXQjojYBmwDWL9+fcUQ1TRVE7wTM9L0VUnyMWBbDjww4tX0kvwvD9qfmTspWjlzc3MDP0PNZQUvtU+VJD8PnN33eh1wtHxQRLwI+BiwJTO/V094ahJvySe1T5Ukvx/YGBEbgAeBS4HL+w+IiPXAp4E3ZuZ9tUepqRhWuVutS+0wMsln5vGIuAq4FVgFXJ+ZhyJie7F/B/CnwDOBj0QEwPHMNAO03LAEbwUvtUOli6Eycy+wt7RtR9/ztwBvqTc0TZsVvNR+XvGqSrxqVWonk7wAb78ndZULlAkYPvvuVatSe1nJz6ClVO324KV2M8nPoFFVu5MzUneY5DtqOT12q3ape0zyHeX6MpLAE6+dtHvfQdeXkQRYyXfSTbccePy51bo020zyHTCs/261Ls022zUdMGyNma0XeidGaZaZ5Ftusf67PXdJYLum9ey/SxrGJN9Ci/XgrdwlldmuaaFBCd7+u6RBTPItM6gHb/9d0mJs17SMPXhJS2El3yLlKt7qXdIoJvkWKVfx9uAljWK7psG8klXSSlnJN5hXskpaKSv5hqi6/ruTNJKWwiTfEN6tSdI42K5pgGHrv1u5S1oJK/kGcPZd0rhYyU+Zs++SxskkP2XOvksaJ9s1Y1R1YmaBVbykulnJj9FSErxVvKRxsJIfg6VW8E7QSBoXk/wYlBO8EzOSpqVSko+IzcC1wCrgY5n5ntL+KPZfBPwIeFNmfq3mWIGlV8nTZpUuaZpGJvmIWAVcB7wWmAf2R8SezLy777AtwMbicQHw0eLX2rUtwVvBS5qmKidezwcOZ+aRzHwU2AVsLR2zFbghe24HTo+Is2qOFaBVCd4KXtK0VWnXrAUe6Hs9z8lV+qBj1gIP9R8UEduAbQDr169faqwnufna7Sv+DEnqsiqVfAzYlss4hszcmZlzmTm3Zs2aKvFJklagSiU/D5zd93odcHQZx9TC6l2SqqtSye8HNkbEhohYDVwK7Ckdswe4InpeDnw/Mx8qf5AkabJGVvKZeTwirgJupTdCeX1mHoqI7cX+HcBeeuOTh+mNUF45vpAlSVVVmpPPzL30Enn/th19zxN4a72hSZJWyrVrJKnDTPKS1GEmeUnqMJO8JHVY9M6ZTuGLI44B353Kl8MZwCNT+u6qjLE+bYjTGOsxCzE+JzMrX006tSQ/TRFxIDMbvbCMMdanDXEaYz2M8WS2aySpw0zyktRhs5rkd047gAqMsT5tiNMY62GMJTPZk5ekWTGrlbwkzQSTvCR1WWa24gFsBu6lt9Ll1QP2B/ChYv9dwHmj3gu8E3gQuLN4XFRsfy1wB/CN4tcL+97zheKzFt5zZgNjXE2v73cf8B/AxU2KEXha37F30psZ/mCTYiz2XVZsvwv4HHBGQ/9MXlJ8/iHgfVOM8fy+bQeB1/e956VF7IeL74sGxvjn9O5w94Mp55+BMQJPAf6J3t/pQ8B7KuXOlSTeST3oLXH8beC59BLYQWBT6ZiLgFuKH/bLga+Mem/xQ/7DAd/3EuDZxfNfAB7s2/cFYK7hMb4LeHfx/EkUyalJMZaOuwP4lSbFSG+F1of7fnbvA97ZtN9v4JnA/cCa4vXfAK+ZUoxPAU4pnp9V/PwWXn8VeEXxPbcAWxoY48uLbT8ovacRMRbbX11sXw18aeHnOOzRlnbNSm4mXuW9J8jMr2fmwp2tDgFPjojTWhTjbwN/URz3WGYuXF3XpBgBiIiNwJn0/sA2KcYoHk+NiACezol3O2tKnM8F7svMY8W+fwEunlKMP8rM48XLJ1PcArT4vKdn5m3Zy1A3AK9rUozFvttz8M2OGhFjsf1fi+ePAl+jdxe+odqS5Be7UXiVY0a996qIuCsiro+IZwz47ouBr2fmj/u2/XVE3BkRf1IkgMbEGBGnF9uuiYivRcSnIuJZTYqxtP0y4KbiL39jYszMnwC/S6/FcBTYBHy8QgwTjZNeC+AFEXFORJxCL3ku3Ipz4jFGxAURcYjez217kazWFu8f9FlNiXGYxsVY/D3/TeDzI2JvTZJfyc3Eh733o8DzgBcDDwEfOOEDI14IvBf4nb7Nb8jMXwReWTze2LAYT6H3r/u/Z+Z5wG3AXzYsxn6XAjdW+P6JxhgRp9JL8i8Bnk2vz/qOpsWZmf9TxHkTvf8N/SewkBAmHmNmfiUzXwi8DHhHRDx5xGc1JcZhGhVj8Y/5jcCHMvPIiNhbk+RXcjPxRd+bmf+VmT/NzMeAv6L3XysAImId8Bngisz89sL2zHyw+PX/gE/2vacpMX6P3i0YP1O8/hRwXsNiXNh3Lr3e4x0Vvn/SMb64eN+3i/9l/B3wSw2Mk8z8bGZekJmvoHeC71vTirEvpnuAH9I7fzDPiW2F/jiaEuMwTYtxJ/CtzPzgiLgf/5DGP+hVp0eADTxx8uKFpWN+gxNPfHx11HuBs/re/wfAruL56cVxFw+IY+FE3KnA39P7r1RjYiz27eKJSZY3AZ9qWozF/vcA72ro7/Wz6VVXCyc0rwE+0LQ4i31nFr8+g95ExvOnFOMGnjhh+Bx6yWzh78v+4vMXTrxe1LQY+44vn3htTIzAu4GbgSdVzp9LSbbTfNA7e30fvTPVf1Rs284TSTaA64r936BvAmbQe4vtf8sTI3J7Fn7owB/T+9ezf8zvTOCp9CZBFsbVrgVWNSnGvj8YXyze83lgfdNiLPYfAV7QxN/rvu+8p3jPZ4FnNjTOG4G7i8elU4zxjfT+XtxJ76Tg6/reMwd8s/isD3PiCGVTYnwfvcr7seLXdzYpRnr/C0h6fyYX/gy8ZVTudFkDSeqwtvTkJUnLYJKXpA4zyUtSh5nkJanDTPKS1GEmeUnqMJO8JHXY/wMM8EyNpe5l7wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "cdf = thinkstats2.Cdf(slopes)\n",
    "thinkplot.Cdf(cdf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "pvalue = cdf[0]\n",
    "pvalue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0052589881317883285, 0.0053074136988239045)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ci = cdf.Percentile(5), cdf.Percentile(95)\n",
    "ci"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.4431511834205046e-05"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "stderr = thinkstats2.Std(slopes)\n",
    "stderr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mean, SE, CI 168.95737032377374 0.015278448791581233 (168.93304987974696, 168.98398057761878)\n"
     ]
    }
   ],
   "source": [
    "estimates_unweighted = [thinkstats2.ResampleRows(df).htm3.mean() for _ in range(100)]\n",
    "Summarize(estimates_unweighted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "estimates_weighted = [ResampleRowsWeighted(df, 'finalwt').htm3.mean() for _ in range(100)]\n",
    "Summarize(estimates_weighted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# I wrote my assignment with estimate weighted and unweighted. to overcome the over sampling weighted is very usuful"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
